// <auto-generated />
using System;
using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(Swp391onGoingReportContext))]
    partial class Swp391onGoingReportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Class", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("classID");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("className");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("courseID");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("isCompleted");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("timeEnd");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime")
                        .HasColumnName("timeStart");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.HasKey("ClassId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("courseID");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("courseCode");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("courseName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnName("isDelete");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("timeCreated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.HasKey("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("projectID");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("classID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("projectName");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClassId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ProjectTeam", b =>
                {
                    b.Property<Guid>("ProjectTeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("projectTeamID");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("projectID");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("teamName");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("timeEnd");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime")
                        .HasColumnName("timeStart");

                    b.HasKey("ProjectTeamId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTeam", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roleID");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentClass", b =>
                {
                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("studentClassID");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("classID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.HasKey("StudentClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentClass", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentTask", b =>
                {
                    b.Property<Guid>("StudentTaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("studentTaskID");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("taskID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.HasKey("StudentTaskId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentTask", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("taskID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("projectID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("status")
                        .IsFixedLength();

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("taskName");

                    b.HasKey("TaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.TeamMember", b =>
                {
                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("teamMemberID");

                    b.Property<Guid>("ProjectTeamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("projectTeamID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.HasKey("TeamMemberId");

                    b.HasIndex("ProjectTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMember", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.TeamRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("requestID");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("classID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("status")
                        .IsFixedLength();

                    b.Property<Guid>("Team")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("team");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.HasKey("RequestId");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullName");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit")
                        .HasColumnName("isBan");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roleID");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.UserCourse", b =>
                {
                    b.Property<Guid>("UserCourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userCourseID");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("courseID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.HasKey("UserCourseId");

                    b.ToTable("UserCourse", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Class", b =>
                {
                    b.HasOne("BusinessObjects.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Class_Course");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Class_User");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Course", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Course_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Project", b =>
                {
                    b.HasOne("BusinessObjects.Models.Class", "Class")
                        .WithMany("Projects")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Project_Class");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("BusinessObjects.Models.ProjectTeam", b =>
                {
                    b.HasOne("BusinessObjects.Models.Project", "Project")
                        .WithMany("ProjectTeams")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ProjectTeam_Project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentClass", b =>
                {
                    b.HasOne("BusinessObjects.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentClass_Class");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("StudentClasses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentClass_User");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentTask", b =>
                {
                    b.HasOne("BusinessObjects.Models.Task", "Task")
                        .WithMany("StudentTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentTask_Task");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("StudentTasks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentTask_User");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Task", b =>
                {
                    b.HasOne("BusinessObjects.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Task_Project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BusinessObjects.Models.TeamMember", b =>
                {
                    b.HasOne("BusinessObjects.Models.ProjectTeam", "ProjectTeam")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ProjectTeamId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamMember_ProjectTeam");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamMember_User");

                    b.Navigation("ProjectTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.TeamRequest", b =>
                {
                    b.HasOne("BusinessObjects.Models.Class", "Class")
                        .WithMany("TeamRequests")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamRequest_Class");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("TeamRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamRequest_User");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.HasOne("BusinessObjects.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObjects.Models.Class", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("StudentClasses");

                    b.Navigation("TeamRequests");
                });

            modelBuilder.Entity("BusinessObjects.Models.Course", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("BusinessObjects.Models.Project", b =>
                {
                    b.Navigation("ProjectTeams");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BusinessObjects.Models.ProjectTeam", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObjects.Models.Task", b =>
                {
                    b.Navigation("StudentTasks");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentTasks");

                    b.Navigation("TeamMembers");

                    b.Navigation("TeamRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
